{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "b1c3ecb9-4ef5-4e40-90cd-29058976589d",
            "version": "KqlParameterItem/1.0",
            "name": "View",
            "type": 11,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    {\"value\": \"general\", \"label\": \"General\"},\r\n    {\"value\": \"bpa\", \"label\": \"Best Practices Assessment\"},\r\n    {\"value\": \"licensing\", \"label\": \"Licensing\"},\r\n    {\"value\": \"perf\", \"label\": \"Performance\"},\r\n    {\"value\": \"security\", \"label\": \"Security\"},\r\n    {\"value\": \"backups\", \"label\": \"Backups\"},\r\n    {\"value\": \"aoag\", \"label\": \"Availability Groups\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "general"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 0"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "General Information",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n\t| where type == 'microsoft.azurearcdata/sqlserverinstances' or type == \"microsoft.sqlvirtualmachine/sqlvirtualmachines\" or type == 'microsoft.sql/servers/elasticpools' or ['type'] == \"microsoft.sql/managedinstances\" or type =~ 'Microsoft.Sql/servers/databases'\r\n\t| where [\"kind\"] !contains 'system'\r\n\t| extend propertiesState = tostring(properties.state)\r\n\t| extend propertiesStatus = tostring(properties.status)\r\n\t| extend version = tostring(properties.currentVersion )\r\n\t| extend patch = properties.patchlevel\r\n\t| extend vcore = tostring(properties.vCore)\r\n\t| extend vcores = tostring(properties.vCores)\r\n\t| extend license = case(properties.licenseType == \"BasePrice\", \"Azure Hybrid Use\",\r\n\t\t\t\t\t\tproperties.licenseType == \"LicenseIncluded\", \"Pay as you Go\",\r\n\t\t\t\t\t\ttostring(properties.licenseType)\r\n\t\t\t\t\t)\r\n\t\t| extend poolId = tolower(tostring(properties.elasticPoolId))\r\n\t| join kind=leftouter (\r\n\t\tresources\r\n\t\t| where type == 'microsoft.sql/servers/elasticpools'\r\n\t\t| extend poollicense = case(properties.licenseType == \"BasePrice\", \"Azure Hybrid Use\",\r\n\t\t\tproperties.licenseType == \"LicenseIncluded\", \"Pay as you Go\",\r\n\t\t\t\"Unknown\"\r\n\t\t)\r\n\t\t| extend lowerid = tolower(id)\r\n\t) on $left.poolId == $right.lowerid\r\n\t| extend license = iff(isempty(poollicense), license, poollicense)\r\n| extend SQLversion = case( \r\nsubstring(version, 0, 2) == \"16\", \r\n case(\r\nsubstring(properties.patchLevel,5,4) == \"4145\", \"2022 (CU15)\",\r\nsubstring(properties.patchLevel,5,4) == \"4140\", \"2022 (CU14)\",\r\nsubstring(properties.patchLevel,5,4) == \"4135\", \"2022 (CU14)\",\r\nsubstring(properties.patchLevel,5,4) == \"4131\", \"2022 (CU13)\",\r\nsubstring(properties.patchLevel,5,4) == \"4125\", \"2022 (CU13)\",\r\nsubstring(properties.patchLevel,5,4) == \"4120\", \"2022 (CU12)\",\r\nsubstring(properties.patchLevel,5,4) == \"4115\", \"2022 (CU12)\",\r\nsubstring(properties.patchLevel,5,4) == \"4105\", \"2022 (CU11)\",\r\nsubstring(properties.patchLevel,5,4) == \"4100\", \"2022 (CU10)\",\r\nsubstring(properties.patchLevel,5,4) == \"4095\", \"2022 (CU10)\",\r\nsubstring(properties.patchLevel,5,4) == \"4085\", \"2022 (CU9)\",\r\nsubstring(properties.patchLevel,5,4) == \"4080\", \"2022 (CU8)\",\r\nsubstring(properties.patchLevel,5,4) == \"4075\", \"2022 (CU8)\",\r\nsubstring(properties.patchLevel,5,4) == \"4065\", \"2022 (CU7)\",\r\nsubstring(properties.patchLevel,5,4) == \"4055\", \"2022 (CU6)\",\r\nsubstring(properties.patchLevel,5,4) == \"4045\", \"2022 (CU5)\",\r\nsubstring(properties.patchLevel,5,4) == \"4035\", \"2022 (CU4)\",\r\nsubstring(properties.patchLevel,5,4) == \"4025\", \"2022 (CU3)\",\r\nsubstring(properties.patchLevel,5,4) == \"4015\", \"2022 (CU2)\",\r\nsubstring(properties.patchLevel,5,4) == \"4003\", \"2022 (CU1)\",\r\nsubstring(properties.patchLevel,5,4) == \"1125\", \"2022 (GDR: September 10, 2024)\",\r\nsubstring(properties.patchLevel,5,4) == \"1121\", \"2022 (GDR: July 9, 2024)\",\r\nsubstring(properties.patchLevel,5,4) == \"1115\", \"2022 (GDR: April 9, 2024)\",\r\nsubstring(properties.patchLevel,5,4) == \"1110\", \"2022 (GDR: January 9, 2024)\",\r\nsubstring(properties.patchLevel,5,4) == \"1105\", \"2022 (GDR: October 10, 2023)\",\r\nsubstring(properties.patchLevel,5,4) == \"1050\", \"2022 (GDR: February 14, 2023)\",\r\nsubstring(properties.patchLevel,5,4) == \"1000\", \"2022 (RTM)\",\r\nsubstring(properties.patchLevel,5,4) == \"950\", \"2022 (RC1)\",\r\nsubstring(properties.patchLevel,5,4) == \"900\", \"2022 (RC0)\",\r\nsubstring(properties.patchLevel,5,4) == \"700\", \"2022 (CTP2.1)\",\r\nsubstring(properties.patchLevel,5,4) == \"600\", \"2022 (CTP2.0)\",\r\nsubstring(properties.patchLevel,5,4) == \"500\", \"2022 (CTP1.5)\",\r\nsubstring(properties.patchLevel,5,4) == \"400\", \"2022 (CTP1.4)\",\r\nsubstring(properties.patchLevel,5,4) == \"300\", \"2022 (CTP1.3)\",\r\nsubstring(properties.patchLevel,5,4) == \"200\", \"2022 (CTP1.2)\",\r\nsubstring(properties.patchLevel,5,4) == \"101\", \"2022 (CTP1.1)\",\r\nsubstring(properties.patchLevel,5,4) == \"100\", \"2022 (CTP1.0)\",\r\nisempty(properties.patchLevel), \"\", \"Unknown\"),\r\nsubstring(version, 0, 2) == \"15\", \r\n case(\r\nsubstring(properties.patchLevel,5,4) == \"4390\", \"2019 (CU28)\",\r\nsubstring(properties.patchLevel,5,4) == \"4385\", \"2019 (CU28)\",\r\nsubstring(properties.patchLevel,5,4) == \"4382\", \"2019 (CU27)\",\r\nsubstring(properties.patchLevel,5,4) == \"4375\", \"2019 (CU27)\",\r\nsubstring(properties.patchLevel,5,4) == \"4365\", \"2019 (CU26)\",\r\nsubstring(properties.patchLevel,5,4) == \"4360\", \"2019 (CU25)\",\r\nsubstring(properties.patchLevel,5,4) == \"4355\", \"2019 (CU25)\",\r\nsubstring(properties.patchLevel,5,4) == \"4345\", \"2019 (CU24)\",\r\nsubstring(properties.patchLevel,5,4) == \"4335\", \"2019 (CU23)\",\r\nsubstring(properties.patchLevel,5,4) == \"4326\", \"2019 (CU22)\",\r\nsubstring(properties.patchLevel,5,4) == \"4322\", \"2019 (CU22)\",\r\nsubstring(properties.patchLevel,5,4) == \"4316\", \"2019 (CU21)\",\r\nsubstring(properties.patchLevel,5,4) == \"4312\", \"2019 (CU20)\",\r\nsubstring(properties.patchLevel,5,4) == \"4298\", \"2019 (CU19)\",\r\nsubstring(properties.patchLevel,5,4) == \"4280\", \"2019 (CU18)\",\r\nsubstring(properties.patchLevel,5,4) == \"4261\", \"2019 (CU18)\",\r\nsubstring(properties.patchLevel,5,4) == \"4249\", \"2019 (CU17)\",\r\nsubstring(properties.patchLevel,5,4) == \"4236\", \"2019 (CU16)\",\r\nsubstring(properties.patchLevel,5,4) == \"4223\", \"2019 (CU16)\",\r\nsubstring(properties.patchLevel,5,4) == \"4198\", \"2019 (CU15)\",\r\nsubstring(properties.patchLevel,5,4) == \"4188\", \"2019 (CU14)\",\r\nsubstring(properties.patchLevel,5,4) == \"4178\", \"2019 (CU13)\",\r\nsubstring(properties.patchLevel,5,4) == \"4153\", \"2019 (CU12)\",\r\nsubstring(properties.patchLevel,5,4) == \"4138\", \"2019 (CU11)\",\r\nsubstring(properties.patchLevel,5,4) == \"4123\", \"2019 (CU10)\",\r\nsubstring(properties.patchLevel,5,4) == \"4102\", \"2019 (CU9)\",\r\nsubstring(properties.patchLevel,5,4) == \"4083\", \"2019 (CU8)\",\r\nsubstring(properties.patchLevel,5,4) == \"4073\", \"2019 (CU8)\",\r\nsubstring(properties.patchLevel,5,4) == \"4063\", \"2019 (CU7)\",\r\nsubstring(properties.patchLevel,5,4) == \"4053\", \"2019 (CU6)\",\r\nsubstring(properties.patchLevel,5,4) == \"4043\", \"2019 (CU5)\",\r\nsubstring(properties.patchLevel,5,4) == \"4033\", \"2019 (CU4)\",\r\nsubstring(properties.patchLevel,5,4) == \"4023\", \"2019 (CU3)\",\r\nsubstring(properties.patchLevel,5,4) == \"4013\", \"2019 (CU2)\",\r\nsubstring(properties.patchLevel,5,4) == \"4003\", \"2019 (CU1)\",\r\nsubstring(properties.patchLevel,5,4) == \"2120\", \"2019 (GDR: September 10, 2024)\",\r\nsubstring(properties.patchLevel,5,4) == \"2116\", \"2019 (GDR: July 9, 2024)\",\r\nsubstring(properties.patchLevel,5,4) == \"2110\", \"2019 (GDR: April 9, 2024)\",\r\nsubstring(properties.patchLevel,5,4) == \"2104\", \"2019 (GDR: October 10, 2023)\",\r\nsubstring(properties.patchLevel,5,4) == \"2101\", \"2019 (GDR: February 14, 2023)\",\r\nsubstring(properties.patchLevel,5,4) == \"2095\", \"2019 (GDR: June 14, 2022)\",\r\nsubstring(properties.patchLevel,5,4) == \"2090\", \"2019 (GDR: February 8, 2022)\",\r\nsubstring(properties.patchLevel,5,4) == \"2080\", \"2019 (GDR: January 12, 2021)\",\r\nsubstring(properties.patchLevel,5,4) == \"2070\", \"2019 (RTM)\",\r\nsubstring(properties.patchLevel,5,4) == \"2000\", \"2019 (RTM)\",\r\nsubstring(properties.patchLevel,5,4) == \"1900\", \"2019 (RC1)\",\r\nsubstring(properties.patchLevel,5,4) == \"1800\", \"2019 (CTP3.2)\",\r\nsubstring(properties.patchLevel,5,4) == \"1700\", \"2019 (CTP3.1)\",\r\nsubstring(properties.patchLevel,5,4) == \"1600\", \"2019 (CTP3.0)\",\r\nsubstring(properties.patchLevel,5,4) == \"1500\", \"2019 (CTP2.5)\",\r\nsubstring(properties.patchLevel,5,4) == \"1400\", \"2019 (CTP2.4)\",\r\nsubstring(properties.patchLevel,5,4) == \"1300\", \"2019 (CTP2.3)\",\r\nsubstring(properties.patchLevel,5,4) == \"1200\", \"2019 (CTP2.2)\",\r\nsubstring(properties.patchLevel,5,4) == \"1100\", \"2019 (CTP2.1)\",\r\nsubstring(properties.patchLevel,5,4) == \"1000\", \"2019 (CTP2.0)\",\r\nisempty(properties.patchLevel), \"\", \"Unknown\"),\r\nsubstring(version, 0, 2) == \"14\", \r\n case(\r\nsubstring(properties.patchLevel,5,4) == \"3475\", \"2017 (CU31)\",\r\nsubstring(properties.patchLevel,5,4) == \"3471\", \"2017 (CU31)\",\r\nsubstring(properties.patchLevel,5,4) == \"3465\", \"2017 (CU31)\",\r\nsubstring(properties.patchLevel,5,4) == \"3460\", \"2017 (CU31)\",\r\nsubstring(properties.patchLevel,5,4) == \"3456\", \"2017 (CU31)\",\r\nsubstring(properties.patchLevel,5,4) == \"3451\", \"2017 (CU30)\",\r\nsubstring(properties.patchLevel,5,4) == \"3445\", \"2017 (CU29)\",\r\nsubstring(properties.patchLevel,5,4) == \"3436\", \"2017 (CU29)\",\r\nsubstring(properties.patchLevel,5,4) == \"3430\", \"2017 (CU28)\",\r\nsubstring(properties.patchLevel,5,4) == \"3421\", \"2017 (CU27)\",\r\nsubstring(properties.patchLevel,5,4) == \"3411\", \"2017 (CU26)\",\r\nsubstring(properties.patchLevel,5,4) == \"3401\", \"2017 (CU25)\",\r\nsubstring(properties.patchLevel,5,4) == \"3391\", \"2017 (CU24)\",\r\nsubstring(properties.patchLevel,5,4) == \"3381\", \"2017 (CU23)\",\r\nsubstring(properties.patchLevel,5,4) == \"3370\", \"2017 (CU22)\",\r\nsubstring(properties.patchLevel,5,4) == \"3356\", \"2017 (CU22)\",\r\nsubstring(properties.patchLevel,5,4) == \"3335\", \"2017 (CU21)\",\r\nsubstring(properties.patchLevel,5,4) == \"3294\", \"2017 (CU20)\",\r\nsubstring(properties.patchLevel,5,4) == \"3281\", \"2017 (CU19)\",\r\nsubstring(properties.patchLevel,5,4) == \"3257\", \"2017 (CU18)\",\r\nsubstring(properties.patchLevel,5,4) == \"3238\", \"2017 (CU17)\",\r\nsubstring(properties.patchLevel,5,4) == \"3223\", \"2017 (CU16)\",\r\nsubstring(properties.patchLevel,5,4) == \"3208\", \"2017 (CU15)\",\r\nsubstring(properties.patchLevel,5,4) == \"3192\", \"2017 (CU15)\",\r\nsubstring(properties.patchLevel,5,4) == \"3164\", \"2017 (CU15)\",\r\nsubstring(properties.patchLevel,5,4) == \"3162\", \"2017 (CU15)\",\r\nsubstring(properties.patchLevel,5,4) == \"3103\", \"2017 (CU14)\",\r\nsubstring(properties.patchLevel,5,4) == \"3076\", \"2017 (CU14)\",\r\nsubstring(properties.patchLevel,5,4) == \"3049\", \"2017 (CU13)\",\r\nsubstring(properties.patchLevel,5,4) == \"3048\", \"2017 (CU13)\",\r\nsubstring(properties.patchLevel,5,4) == \"3045\", \"2017 (CU12)\",\r\nsubstring(properties.patchLevel,5,4) == \"3038\", \"2017 (CU11)\",\r\nsubstring(properties.patchLevel,5,4) == \"3037\", \"2017 (CU10)\",\r\nsubstring(properties.patchLevel,5,4) == \"3035\", \"2017 (CU)\",\r\nsubstring(properties.patchLevel,5,4) == \"3030\", \"2017 (CU9)\",\r\nsubstring(properties.patchLevel,5,4) == \"3029\", \"2017 (CU8)\",\r\nsubstring(properties.patchLevel,5,4) == \"3026\", \"2017 (CU7)\",\r\nsubstring(properties.patchLevel,5,4) == \"3025\", \"2017 (CU6)\",\r\nsubstring(properties.patchLevel,5,4) == \"3023\", \"2017 (CU5)\",\r\nsubstring(properties.patchLevel,5,4) == \"3022\", \"2017 (CU4)\",\r\nsubstring(properties.patchLevel,5,4) == \"3015\", \"2017 (CU3)\",\r\nsubstring(properties.patchLevel,5,4) == \"3008\", \"2017 (CU2)\",\r\nsubstring(properties.patchLevel,5,4) == \"3006\", \"2017 (CU1)\",\r\nsubstring(properties.patchLevel,5,4) == \"2060\", \"2017 (GDR: September 10, 2024)\",\r\nsubstring(properties.patchLevel,5,4) == \"2056\", \"2017 (GDR: July 9, 2024)\",\r\nsubstring(properties.patchLevel,5,4) == \"2052\", \"2017 (GDR: October 10, 2023)\",\r\nsubstring(properties.patchLevel,5,4) == \"2047\", \"2017 (GDR: February 14, 2023)\",\r\nsubstring(properties.patchLevel,5,4) == \"2042\", \"2017 (GDR: June 14, 2022)\",\r\nsubstring(properties.patchLevel,5,4) == \"2037\", \"2017 (GDR: January 12, 2021)\",\r\nsubstring(properties.patchLevel,5,4) == \"2027\", \"2017 (GDR: July 9, 2019)\",\r\nsubstring(properties.patchLevel,5,4) == \"2014\", \"2017 (GDR: May 14, 2019)\",\r\nsubstring(properties.patchLevel,5,4) == \"2002\", \"2017 (GDR: August 14, 2018)\",\r\nsubstring(properties.patchLevel,5,4) == \"2000\", \"2017 (GDR: January 3, 2018  Security Advisory ADV180002)\",\r\nsubstring(properties.patchLevel,5,4) == \"1000\", \"2017 (RTM)\",\r\nsubstring(properties.patchLevel,5,4) == \"900\", \"2017 (RC2)\",\r\nsubstring(properties.patchLevel,5,4) == \"800\", \"2017 (RC1)\",\r\nsubstring(properties.patchLevel,5,4) == \"600\", \"2017 (CTP2.1)\",\r\nsubstring(properties.patchLevel,5,4) == \"500\", \"2017 (CTP2.0)\",\r\nsubstring(properties.patchLevel,5,4) == \"405\", \"2017 (CTP1.4)\",\r\nsubstring(properties.patchLevel,5,4) == \"304\", \"2017 (CTP1.3)\",\r\nsubstring(properties.patchLevel,5,4) == \"200\", \"2017 (CTP1.2)\",\r\nsubstring(properties.patchLevel,5,4) == \"100\", \"2017 (CTP1.1)\",\r\nsubstring(properties.patchLevel,5,4) == \"1\", \"2017 (CTP1)\",\r\nisempty(properties.patchLevel), \"\", \"Unknown\"),\r\nsubstring(version, 0, 2) == \"13\", \r\n case(\r\nsubstring(properties.patchLevel,5,4) == \"7040\", \"2016 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"7037\", \"2016 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"7029\", \"2016 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"7024\", \"2016 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"7016\", \"2016 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"7000\", \"2016 Azure Connect Feature Pack for SQL Server 2016 Service Pack 3\",\r\nsubstring(properties.patchLevel,5,4) == \"6445\", \"2016 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6441\", \"2016 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6435\", \"2016 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6430\", \"2016 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6419\", \"2016 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6404\", \"2016 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6300\", \"2016 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"5893\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5888\", \"2016 (SP2 CU17)\",\r\nsubstring(properties.patchLevel,5,4) == \"5882\", \"2016 (SP2 CU16)\",\r\nsubstring(properties.patchLevel,5,4) == \"5865\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5850\", \"2016 (SP2 CU15)\",\r\nsubstring(properties.patchLevel,5,4) == \"5830\", \"2016 (SP2 CU14)\",\r\nsubstring(properties.patchLevel,5,4) == \"5820\", \"2016 (SP2 CU13)\",\r\nsubstring(properties.patchLevel,5,4) == \"5698\", \"2016 (SP2 CU12)\",\r\nsubstring(properties.patchLevel,5,4) == \"5622\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5598\", \"2016 (SP2 CU11)\",\r\nsubstring(properties.patchLevel,5,4) == \"5492\", \"2016 (SP2 CU10)\",\r\nsubstring(properties.patchLevel,5,4) == \"5479\", \"2016 (SP2 CU9)\",\r\nsubstring(properties.patchLevel,5,4) == \"5426\", \"2016 (SP2 CU8)\",\r\nsubstring(properties.patchLevel,5,4) == \"5382\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5366\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5343\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5337\", \"2016 (SP2 CU7)\",\r\nsubstring(properties.patchLevel,5,4) == \"5292\", \"2016 (SP2 CU6)\",\r\nsubstring(properties.patchLevel,5,4) == \"5270\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5264\", \"2016 (SP2 CU5)\",\r\nsubstring(properties.patchLevel,5,4) == \"5239\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5233\", \"2016 (SP2 CU4)\",\r\nsubstring(properties.patchLevel,5,4) == \"5221\", \"2016 FIX: 3414 and 9003 errors and a .pmm log file grows large in SQL Server 2016\",\r\nsubstring(properties.patchLevel,5,4) == \"5216\", \"2016 (SP2 CU3)\",\r\nsubstring(properties.patchLevel,5,4) == \"5201\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5161\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5153\", \"2016 (SP2 CU2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5149\", \"2016 (SP2 CU1)\",\r\nsubstring(properties.patchLevel,5,4) == \"5108\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5103\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5102\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5101\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5081\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5026\", \"2016 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"4604\", \"2016 (SP1)\",\r\nsubstring(properties.patchLevel,5,4) == \"4577\", \"2016 (SP1)\",\r\nsubstring(properties.patchLevel,5,4) == \"4574\", \"2016 (SP1 CU15)\",\r\nsubstring(properties.patchLevel,5,4) == \"4560\", \"2016 (SP1 CU14)\",\r\nsubstring(properties.patchLevel,5,4) == \"4550\", \"2016 (SP1 CU13)\",\r\nsubstring(properties.patchLevel,5,4) == \"4541\", \"2016 (SP1 CU12)\",\r\nsubstring(properties.patchLevel,5,4) == \"4531\", \"2016 FIX: The modification_counter in DMV sys.dm_db_stats_properties shows incorrect value when partitions are merged through ALTER PARTITION in SQL Server 2016\",\r\nsubstring(properties.patchLevel,5,4) == \"4528\", \"2016 (SP1 CU11)\",\r\nsubstring(properties.patchLevel,5,4) == \"4522\", \"2016 (SP1)\",\r\nsubstring(properties.patchLevel,5,4) == \"4514\", \"2016 (SP1 CU10)\",\r\nsubstring(properties.patchLevel,5,4) == \"4502\", \"2016 (SP1 CU9)\",\r\nsubstring(properties.patchLevel,5,4) == \"4477\", \"2016 (SP1)\",\r\nsubstring(properties.patchLevel,5,4) == \"4474\", \"2016 (SP1 CU8)\",\r\nsubstring(properties.patchLevel,5,4) == \"4466\", \"2016 (SP1 CU7)\",\r\nsubstring(properties.patchLevel,5,4) == \"4457\", \"2016 (SP1 CU6)\",\r\nsubstring(properties.patchLevel,5,4) == \"4451\", \"2016 (SP1 CU5)\",\r\nsubstring(properties.patchLevel,5,4) == \"4446\", \"2016 (SP1 CU4)\",\r\nsubstring(properties.patchLevel,5,4) == \"4435\", \"2016 (SP1 CU3)\",\r\nsubstring(properties.patchLevel,5,4) == \"4422\", \"2016 (SP1 CU2)\",\r\nsubstring(properties.patchLevel,5,4) == \"4411\", \"2016 (SP1 CU1)\",\r\nsubstring(properties.patchLevel,5,4) == \"4259\", \"2016 (SP1)\",\r\nsubstring(properties.patchLevel,5,4) == \"4224\", \"2016 (SP1)\",\r\nsubstring(properties.patchLevel,5,4) == \"4223\", \"2016 (SP1)\",\r\nsubstring(properties.patchLevel,5,4) == \"4210\", \"2016 (SP1)\",\r\nsubstring(properties.patchLevel,5,4) == \"4206\", \"2016 (SP1 GDR: August 8, 2017)\",\r\nsubstring(properties.patchLevel,5,4) == \"4202\", \"2016 (SP1)\",\r\nsubstring(properties.patchLevel,5,4) == \"4199\", \"2016 (SP1)\",\r\nsubstring(properties.patchLevel,5,4) == \"4001\", \"2016 (SP1)\",\r\nsubstring(properties.patchLevel,5,4) == \"2218\", \"2016 (CU)\",\r\nsubstring(properties.patchLevel,5,4) == \"2216\", \"2016 (CU9)\",\r\nsubstring(properties.patchLevel,5,4) == \"2213\", \"2016 (CU8)\",\r\nsubstring(properties.patchLevel,5,4) == \"2210\", \"2016 (CU7)\",\r\nsubstring(properties.patchLevel,5,4) == \"2204\", \"2016 (CU6)\",\r\nsubstring(properties.patchLevel,5,4) == \"2197\", \"2016 (CU5)\",\r\nsubstring(properties.patchLevel,5,4) == \"2193\", \"2016 (CU4)\",\r\nsubstring(properties.patchLevel,5,4) == \"2190\", \"2016 (CU3)\",\r\nsubstring(properties.patchLevel,5,4) == \"2186\", \"2016 (CU)\",\r\nsubstring(properties.patchLevel,5,4) == \"2170\", \"2016 (CU2)\",\r\nsubstring(properties.patchLevel,5,4) == \"2169\", \"2016 (CU2)\",\r\nsubstring(properties.patchLevel,5,4) == \"2164\", \"2016 (CU2)\",\r\nsubstring(properties.patchLevel,5,4) == \"2149\", \"2016 (CU1)\",\r\nsubstring(properties.patchLevel,5,4) == \"1745\", \"2016 (GDR: January 6, 2018  Security Advisory ADV180002)\",\r\nsubstring(properties.patchLevel,5,4) == \"1742\", \"2016 (RTM)\",\r\nsubstring(properties.patchLevel,5,4) == \"1728\", \"2016 (RTM)\",\r\nsubstring(properties.patchLevel,5,4) == \"1722\", \"2016 (GDR: November 8, 2016)\",\r\nsubstring(properties.patchLevel,5,4) == \"1711\", \"2016 Processing a partition causes data loss on other partitions after the database is restored in SQL Server 2016 (1200)\",\r\nsubstring(properties.patchLevel,5,4) == \"1708\", \"2016 Critical update for SQL Server 2016 MSVCRT prerequisites\",\r\nsubstring(properties.patchLevel,5,4) == \"1601\", \"2016 (RTM)\",\r\nsubstring(properties.patchLevel,5,4) == \"1400\", \"2016 (RC3)\",\r\nsubstring(properties.patchLevel,5,4) == \"1300\", \"2016 (RC2)\",\r\nsubstring(properties.patchLevel,5,4) == \"1200\", \"2016 (RC1)\",\r\nsubstring(properties.patchLevel,5,4) == \"1100\", \"2016 (RC0)\",\r\nsubstring(properties.patchLevel,5,4) == \"1000\", \"2016 (CTP3.3)\",\r\nsubstring(properties.patchLevel,5,4) == \"900\", \"2016 (CTP3.2)\",\r\nsubstring(properties.patchLevel,5,4) == \"800\", \"2016 (CTP3.1)\",\r\nsubstring(properties.patchLevel,5,4) == \"700\", \"2016 (CTP3.0)\",\r\nsubstring(properties.patchLevel,5,4) == \"600\", \"2016 (CTP2.4)\",\r\nsubstring(properties.patchLevel,5,4) == \"500\", \"2016 (CTP2.3)\",\r\nsubstring(properties.patchLevel,5,4) == \"407\", \"2016 (CTP2.2)\",\r\nsubstring(properties.patchLevel,5,4) == \"400\", \"2016 (CTP2.2)\",\r\nsubstring(properties.patchLevel,5,4) == \"300\", \"2016 (CTP2.1)\",\r\nsubstring(properties.patchLevel,5,4) == \"200\", \"2016 (CTP2)\",\r\nisempty(properties.patchLevel), \"\", \"Unknown\"),\r\nsubstring(version, 0, 2) == \"12\", \r\n case(\r\nsubstring(properties.patchLevel,5,4) == \"6449\", \"2014 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6444\", \"2014 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6439\", \"2014 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6433\", \"2014 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6372\", \"2014 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6329\", \"2014 (SP3 CU4)\",\r\nsubstring(properties.patchLevel,5,4) == \"6293\", \"2014 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6259\", \"2014 (SP3 CU3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6214\", \"2014 (SP3 CU2)\",\r\nsubstring(properties.patchLevel,5,4) == \"6205\", \"2014 (SP3 CU1)\",\r\nsubstring(properties.patchLevel,5,4) == \"6179\", \"2014 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6174\", \"2014 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6169\", \"2014 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6164\", \"2014 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6118\", \"2014 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6108\", \"2014 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"6024\", \"2014 (SP3)\",\r\nsubstring(properties.patchLevel,5,4) == \"5687\", \"2014 (SP2 CU18)\",\r\nsubstring(properties.patchLevel,5,4) == \"5659\", \"2014 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5632\", \"2014 (SP2 CU17)\",\r\nsubstring(properties.patchLevel,5,4) == \"5626\", \"2014 (SP2 CU16)\",\r\nsubstring(properties.patchLevel,5,4) == \"5605\", \"2014 (SP2 CU15)\",\r\nsubstring(properties.patchLevel,5,4) == \"5600\", \"2014 (SP2 CU14)\",\r\nsubstring(properties.patchLevel,5,4) == \"5590\", \"2014 (SP2 CU13)\",\r\nsubstring(properties.patchLevel,5,4) == \"5589\", \"2014 (SP2 CU12)\",\r\nsubstring(properties.patchLevel,5,4) == \"5579\", \"2014 (SP2 CU11)\",\r\nsubstring(properties.patchLevel,5,4) == \"5571\", \"2014 (SP2 CU10)\",\r\nsubstring(properties.patchLevel,5,4) == \"5563\", \"2014 (SP2 CU9)\",\r\nsubstring(properties.patchLevel,5,4) == \"5557\", \"2014 (SP2 CU8)\",\r\nsubstring(properties.patchLevel,5,4) == \"5556\", \"2014 (SP2 CU7)\",\r\nsubstring(properties.patchLevel,5,4) == \"5553\", \"2014 (SP2 CU6)\",\r\nsubstring(properties.patchLevel,5,4) == \"5546\", \"2014 (SP2 CU5)\",\r\nsubstring(properties.patchLevel,5,4) == \"5540\", \"2014 (SP2 CU4)\",\r\nsubstring(properties.patchLevel,5,4) == \"5538\", \"2014 (SP2 CU3)\",\r\nsubstring(properties.patchLevel,5,4) == \"5532\", \"2014 (SP2 CU)\",\r\nsubstring(properties.patchLevel,5,4) == \"5522\", \"2014 (SP2 CU2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5511\", \"2014 (SP2 CU1)\",\r\nsubstring(properties.patchLevel,5,4) == \"5223\", \"2014 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"5214\", \"2014 (SP2 GDR: January 16, 2018  Security Advisory ADV180002)\",\r\nsubstring(properties.patchLevel,5,4) == \"5207\", \"2014 (SP2 GDR: August 8, 2017)\",\r\nsubstring(properties.patchLevel,5,4) == \"5203\", \"2014 (SP2 GDR: November 8, 2016)\",\r\nsubstring(properties.patchLevel,5,4) == \"5000\", \"2014 (SP2)\",\r\nsubstring(properties.patchLevel,5,4) == \"4522\", \"2014 (SP1 CU13)\",\r\nsubstring(properties.patchLevel,5,4) == \"4511\", \"2014 (SP1 CU12)\",\r\nsubstring(properties.patchLevel,5,4) == \"4502\", \"2014 (SP1 CU11)\",\r\nsubstring(properties.patchLevel,5,4) == \"4491\", \"2014 (SP1 CU10)\",\r\nsubstring(properties.patchLevel,5,4) == \"4487\", \"2014 (SP1 CU)\",\r\nsubstring(properties.patchLevel,5,4) == \"4474\", \"2014 (SP1 CU9)\",\r\nsubstring(properties.patchLevel,5,4) == \"4468\", \"2014 (SP1 CU8)\",\r\nsubstring(properties.patchLevel,5,4) == \"4463\", \"2014 A memory leak occurs when you use Azure Storage in SQL Server 2014\",\r\nsubstring(properties.patchLevel,5,4) == \"4459\", \"2014 (SP1 CU7)\",\r\nsubstring(properties.patchLevel,5,4) == \"4457\", \"2014 (SP1 CU6)\",\r\nsubstring(properties.patchLevel,5,4) == \"4449\", \"2014 (SP1 CU6)\",\r\nsubstring(properties.patchLevel,5,4) == \"4439\", \"2014 (SP1 CU5)\",\r\nsubstring(properties.patchLevel,5,4) == \"4437\", \"2014 On-demand hotfix update package for SQL Server 2014 Service Pack 1 Cumulative Update 4\",\r\nsubstring(properties.patchLevel,5,4) == \"4436\", \"2014 (SP1 CU4)\",\r\nsubstring(properties.patchLevel,5,4) == \"4433\", \"2014 FIX: Error 3203 and a SQL Server 2014 backup job can't restart when a network failure occurs\",\r\nsubstring(properties.patchLevel,5,4) == \"4432\", \"2014 FIX: Error when your stored procedure calls another stored procedure on linked server in SQL Server 2014\",\r\nsubstring(properties.patchLevel,5,4) == \"4237\", \"2014 (SP1 GDR: August 8, 2017)\",\r\nsubstring(properties.patchLevel,5,4) == \"4232\", \"2014 (SP1 GDR: November 8, 2016)\",\r\nsubstring(properties.patchLevel,5,4) == \"4427\", \"2014 (SP1 CU3)\",\r\nsubstring(properties.patchLevel,5,4) == \"4422\", \"2014 (SP1 CU2)\",\r\nsubstring(properties.patchLevel,5,4) == \"4419\", \"2014 (SP1)\",\r\nsubstring(properties.patchLevel,5,4) == \"4416\", \"2014 (SP1 CU1)\",\r\nsubstring(properties.patchLevel,5,4) == \"4219\", \"2014 (SP1)\",\r\nsubstring(properties.patchLevel,5,4) == \"4213\", \"2014 (SP1 GDR: July 14, 2015)\",\r\nsubstring(properties.patchLevel,5,4) == \"4100\", \"2014 (SP1)\",\r\nsubstring(properties.patchLevel,5,4) == \"4050\", \"2014 (SP1)\",\r\nsubstring(properties.patchLevel,5,4) == \"2569\", \"2014 (CU14)\",\r\nsubstring(properties.patchLevel,5,4) == \"2568\", \"2014 (CU13)\",\r\nsubstring(properties.patchLevel,5,4) == \"2564\", \"2014 (CU12)\",\r\nsubstring(properties.patchLevel,5,4) == \"2560\", \"2014 (CU11)\",\r\nsubstring(properties.patchLevel,5,4) == \"2556\", \"2014 (CU10)\",\r\nsubstring(properties.patchLevel,5,4) == \"2553\", \"2014 (CU9)\",\r\nsubstring(properties.patchLevel,5,4) == \"2548\", \"2014 MS15-058: Description of the security update for SQL Server 2014 QFE: July 14, 2015\",\r\nsubstring(properties.patchLevel,5,4) == \"2546\", \"2014 (CU8)\",\r\nsubstring(properties.patchLevel,5,4) == \"2506\", \"2014 Update enables Premium Storage support for Data files on Azure Storage and resolves backup failures\",\r\nsubstring(properties.patchLevel,5,4) == \"2505\", \"2014 FIX: Error 1205 when you execute parallel query that contains outer join operators in SQL Server 2014\",\r\nsubstring(properties.patchLevel,5,4) == \"2504\", \"2014 FIX: Unpivot Transformation task changes null to zero or empty strings in SSIS 2014\",\r\nsubstring(properties.patchLevel,5,4) == \"2495\", \"2014 (CU7)\",\r\nsubstring(properties.patchLevel,5,4) == \"2488\", \"2014 FIX: Deadlock cannot be resolved automatically when you run a SELECT query that can result in a parallel batch-mode scan\",\r\nsubstring(properties.patchLevel,5,4) == \"2485\", \"2014 An on-demand hotfix update package is available for SQL Server 2014\",\r\nsubstring(properties.patchLevel,5,4) == \"2480\", \"2014 (CU6)\",\r\nsubstring(properties.patchLevel,5,4) == \"2474\", \"2014 FIX: AlwaysOn availability groups are reported as NOT SYNCHRONIZING\",\r\nsubstring(properties.patchLevel,5,4) == \"2472\", \"2014 FIX: Cannot show requested dialog after you connect to the latest SQL Database Update V12 (preview) with SQL Server 2014\",\r\nsubstring(properties.patchLevel,5,4) == \"2464\", \"2014 Large query compilation waits on RESOURCE_SEMAPHORE_QUERY_COMPILE in SQL Server 2014\",\r\nsubstring(properties.patchLevel,5,4) == \"2456\", \"2014 (CU5)\",\r\nsubstring(properties.patchLevel,5,4) == \"2436\", \"2014 FIX: Remote hardening failure exception cannot be caught and a potential data loss when you use SQL Server 2014\",\r\nsubstring(properties.patchLevel,5,4) == \"2430\", \"2014 (CU4)\",\r\nsubstring(properties.patchLevel,5,4) == \"2423\", \"2014 FIX: RTDATA_LIST waits when you run natively stored procedures that encounter expected failures in SQL Server 2014\",\r\nsubstring(properties.patchLevel,5,4) == \"2405\", \"2014 FIX: Poor performance when a query contains table joins in SQL Server 2014\",\r\nsubstring(properties.patchLevel,5,4) == \"2402\", \"2014 (CU3)\",\r\nsubstring(properties.patchLevel,5,4) == \"2381\", \"2014 MS14-044: Description of the security update for SQL Server 2014 (QFE)\",\r\nsubstring(properties.patchLevel,5,4) == \"2370\", \"2014 (CU2)\",\r\nsubstring(properties.patchLevel,5,4) == \"2342\", \"2014 (CU1)\",\r\nsubstring(properties.patchLevel,5,4) == \"2271\", \"2014 (RTM)\",\r\nsubstring(properties.patchLevel,5,4) == \"2269\", \"2014 (GDR: July 14, 2015)\",\r\nsubstring(properties.patchLevel,5,4) == \"2254\", \"2014 MS14-044: Description of the security update for SQL Server 2014 (GDR)\",\r\nsubstring(properties.patchLevel,5,4) == \"2000\", \"2014 (RTM)\",\r\nsubstring(properties.patchLevel,5,4) == \"1524\", \"2014 (CTP2)\",\r\nisempty(properties.patchLevel), \"\", \"Unknown\"),                                                         substring(version, 0, 2) == \"11\", \"2012\",\r\n                                                                substring(version, 0, 5) == \"10.50\", \"2008 R2\",\r\n                                substring(version, 0, 2) == \"10\", \"2008\",\r\n                                                                isempty(propertiesState), \"\",    \"Unknown\")\r\n\t| extend Version = case(     ['type'] == \"microsoft.sql/servers/databases\", \"Azure SQL Database\",\r\n                              ['type'] == \"microsoft.sql/managedinstances\", \"SQL Managed Instance\",\r\n\t\t\t\t\t\t\t  ['type'] == \"microsoft.sql/servers/elasticpools\", \"Azure SQL Database\", \r\n\t\t\t\t\t\t\t  SQLversion)\r\n\t| extend edition = iff(isempty(properties.edition), tostring(sku.tier), tostring(properties.edition))\r\n\t| extend state = case(    propertiesState == \"Degraded\", \"Degraded\",    \r\n\t\t\t\t\t\t\t  propertiesState == \"Warned\", \"Warned\",    \r\n\t\t\t\t\t\t\t  propertiesState == \"Disabled\", \"Disabled\",    \r\n\t\t\t\t\t\t\t  propertiesState == \"Ready\", \"Available\",    \r\n\t\t\t\t\t\t\t  propertiesState == \"Reserved\", \"Reserved\",  \r\n\t\t\t\t\t\t\t  propertiesStatus == \"Connected\", \"Connected\",  \r\n\t\t\t\t\t\t\t  isempty(propertiesState), \"\",    \"Unknown\")\r\n    | extend type = case(     ['type'] == \"microsoft.sql/servers/databases\", \"Azure SQL Database\",\r\n                              ['type'] == \"microsoft.sql/managedinstances\", \"SQL Managed Instance\",\r\n                              ['type'] == \"microsoft.azurearcdata/sqlserverinstances\", \"SQL Server Enabled by Arc\",\r\n\t\t\t\t\t\t\t  ['type'] == \"microsoft.sql/servers/elasticpools\", \"Azure SQL Elastic Pool\",\r\n\t\t\t\t\t\t\t  ['type'] == \"microsoft.sqlvirtualmachine/sqlvirtualmachines\", \"Azure SQL Virtual Machine\",\r\n                              isempty(['type']), \"\",    \"Unknown\")\r\n\t| extend otherCores = case (   vcore != \"\", tostring(vcore), \r\n\t\t\t\t\t\t\t  vcores != \"\", tostring(vcores),\r\n\t\t\t\t\t\t\t  not(isempty(sku.capacity)), tostring(sku.capacity),\r\n\t\t\t\t\t\t\t  \"N/A\")\r\n\t| extend sqlAzureCores = iff(tostring(sku.name) == \"ElasticPool\", strcat(\"Elastic Pool (\", tostring(split(properties.elasticPoolId, \"/elasticPools/\")[1]), \")\"), tostring(sku.capacity))\r\n\t| extend Cores = iff(otherCores == \"0\", sqlAzureCores, otherCores)\r\n\t| project id, name, [\"Type\"] = type, [\"Version\"],  [\"Edition/Tier\"] = edition, [\"L-Type\"] = license, Cores //id, ",
              "size": 0,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "value::all"
              ]
            },
            "name": "query - 0"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "View",
        "comparison": "isEqualTo",
        "value": "general"
      },
      "name": "General"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Best Practices Assessment",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "value::all"
              ],
              "parameters": [
                {
                  "id": "292136e8-a3e4-4095-8511-d3932fab2224",
                  "version": "KqlParameterItem/1.0",
                  "name": "bpala",
                  "label": "BPA Workspace",
                  "type": 5,
                  "description": "Best Practices Log Analytics Workspace, please select the workspace(s) where you store your Best Practices Analysis Results.",
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "resources\r\n| where type == \"microsoft.operationalinsights/workspaces\"\r\n| project value = id, label = name, selected = false, group = resourceGroup",
                  "crossComponentResources": [
                    "value::all"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "showDefault": false
                  },
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "defaultValue": "value::all",
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources"
                }
              ],
              "style": "pills",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources"
            },
            "name": "parameters - 0",
            "styleSettings": {
              "showBorder": true
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "SqlAssessment_CL\r\n| extend parse_csv(RawData) // Raw Data is in CSV Format\r\n| project\r\n    TimeGenerated,\r\n    RuleId = RawData[2],\r\n    FullRuleName = RawData[3],\r\n    Description = RawData[4],\r\n    RuleUrl = RawData[5],\r\n    // 1 = Server, 2 = Database\r\n    Scope = case(\r\n        toint(RawData[6]) == 1, \"Server\", \r\n        toint(RawData[6]) == 2, \"Database\", \r\n        \"None\"\r\n    ), // 30 = High Sev, 20 = Medium, 10 = Low, 0 = Info, -1 = Ignore\r\n        Severity = case(\r\n        toint(RawData[8]) == 30, \"1 - High\", \r\n        toint(RawData[8]) == 20, \"2 - Medium\", \r\n        toint(RawData[8]) == 10, \"3 - Low\", \r\n        toint(RawData[8]) == -1, \"4 - Information\", \r\n        \"4 - Information\"\r\n    ),\r\n    Server = tostring(split(RawData[7], \":\")[0]), // Split this and just have null in database for server level items\r\n    Database = tostring(split(RawData[7], \":\")[1]),\r\n    InstanceName = RawData[11],\r\n    SuggestedAction = RawData[9],\r\n    Tags = RawData[10]\r\n| where Severity != \"4 - Information\"\r\n| summarize Findings = count() by Server, Severity\r\n| sort by Server, Severity asc\r\n| render columnchart ",
              "size": 0,
              "timeContext": {
                "durationMs": 604800000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{bpala}"
              ]
            },
            "name": "query - 1"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "SqlAssessment_CL\r\n// Hard Code time to match how often you are running BPA assessments\r\n| where TimeGenerated >= ago(7d)\r\n// Raw Data is in CSV Format\r\n| extend parse_csv(RawData) \r\n| project\r\n    TimeGenerated,\r\n    RuleId = RawData[2],\r\n    FullRuleName = RawData[3],\r\n    Description = RawData[4],\r\n    RuleUrl = RawData[5],\r\n    // 1 = Server, 2 = Database\r\n    Scope = case(\r\n        toint(RawData[6]) == 1, \"Server\", \r\n        toint(RawData[6]) == 2, \"Database\", \r\n        \"None\"\r\n    ),\r\n    // 30 = High Sev, 20 = Medium, 10 = Low, 0 = Info, -1 = Ignore\r\n    Severity = case(\r\n        toint(RawData[8]) == 30, \"High\", \r\n        toint(RawData[8]) == 20, \"Medium\", \r\n        toint(RawData[8]) == 10, \"Low\", \r\n        toint(RawData[8]) == -1, \"Information\", \r\n        \"Information\"\r\n    ),\r\n    // Split this and just have null in database for server level items\r\n    Server = tostring(split(RawData[7], \":\")[0]),\r\n    Database = tostring(split(RawData[7], \":\")[1]),\r\n    InstanceName = RawData[11],\r\n    SuggestedAction = RawData[9],\r\n    Tags = RawData[10],\r\n    id = _ResourceId\r\n| where Severity != 'Information'\r\n| summarize Total = count(Severity), sevH=countif(Severity=='High'), sevM=countif(Severity=='Medium'), sevL=countif(Severity=='Low') by Server, id",
              "size": 0,
              "timeContext": {
                "durationMs": 604800000
              },
              "exportFieldName": "id",
              "exportParameterName": "sqlResource",
              "exportDefaultValue": "All",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{bpala}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Server",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "Total",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "sevH",
                    "formatter": 4,
                    "formatOptions": {
                      "palette": "redBright"
                    }
                  },
                  {
                    "columnMatch": "sevM",
                    "formatter": 4,
                    "formatOptions": {
                      "palette": "yellow"
                    }
                  },
                  {
                    "columnMatch": "sevL",
                    "formatter": 4,
                    "formatOptions": {
                      "palette": "blue"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "id",
                    "label": "Resource"
                  },
                  {
                    "columnId": "sevH",
                    "label": "High"
                  },
                  {
                    "columnId": "sevM",
                    "label": "Medium"
                  },
                  {
                    "columnId": "sevL",
                    "label": "Low"
                  }
                ]
              }
            },
            "name": "query - 2"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "SqlAssessment_CL\r\n// Raw Data is in CSV Format\r\n| extend parse_csv(RawData) \r\n| project\r\n    TimeGenerated,\r\n    RuleId = RawData[2],\r\n    FullRuleName = RawData[3],\r\n    Description = RawData[4],\r\n    RuleUrl = RawData[5],\r\n    // 1 = Server, 2 = Database\r\n    Scope = case(\r\n        toint(RawData[6]) == 1, \"Server\", \r\n        toint(RawData[6]) == 2, \"Database\", \r\n        \"None\"\r\n    ),\r\n    // 30 = High Sev, 20 = Medium, 10 = Low, 0 = Info, -1 = Ignore\r\n    Severity = case(\r\n        toint(RawData[8]) == 30, \"Sev1\", \r\n        toint(RawData[8]) == 20, \"Sev2\", \r\n        toint(RawData[8]) == 10, \"Sev3\", \r\n        toint(RawData[8]) == -1, \"Information\", \r\n        \"Information\"\r\n    ),\r\n    // Split this and just have null in database for server level items\r\n    Server = tostring(split(RawData[7], \":\")[0]),\r\n    Database = tostring(split(RawData[7], \":\")[1]),\r\n    InstanceName = RawData[11],\r\n    SuggestedAction = RawData[9],\r\n    Tags = RawData[10],\r\n    id = _ResourceId\r\n| where Severity != 'Information'\r\n| where '{sqlResource}' == 'All' or id == '{sqlResource}'\r\n| project Severity, id, InstanceName, Scope, FullRuleName, Description, RuleUrl, SuggestedAction\r\n| order by id, Severity asc\r\n",
              "size": 0,
              "timeContext": {
                "durationMs": 604800000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{bpala}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "InstanceName",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "FullRuleName",
                    "formatter": 1,
                    "formatOptions": {
                      "linkColumn": "RuleUrl",
                      "linkTarget": "Url"
                    }
                  },
                  {
                    "columnMatch": "RuleUrl",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Severity",
                    "formatter": 11
                  }
                ]
              }
            },
            "name": "query - 3"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "SqlAssessment_CL\r\n// Raw Data is in CSV Format\r\n| extend parse_csv(RawData) \r\n| project\r\n    TimeGenerated,\r\n    RuleId = RawData[2],\r\n    FullRuleName = tostring(RawData[3]),\r\n    Description = RawData[4],\r\n    RuleUrl = tostring(RawData[5]),\r\n    // 1 = Server, 2 = Database\r\n    Scope = case(\r\n        toint(RawData[6]) == 1, \"Server\", \r\n        toint(RawData[6]) == 2, \"Database\", \r\n        \"None\"\r\n    ),\r\n    // 30 = High Sev, 20 = Medium, 10 = Low, 0 = Info, -1 = Ignore\r\n    Severity = case(\r\n        toint(RawData[8]) == 30, \"Sev1\", \r\n        toint(RawData[8]) == 20, \"Sev2\", \r\n        toint(RawData[8]) == 10, \"Sev3\", \r\n        toint(RawData[8]) == -1, \"Information\", \r\n        \"Information\"\r\n    ),\r\n    Weight = iff(toint(RawData[8]) > 1, toint(RawData[8]), 1),\r\n    // Split this and just have null in database for server level items\r\n    Server = tostring(split(RawData[7], \":\")[0]),\r\n    Database = tostring(split(RawData[7], \":\")[1]),\r\n    InstanceName = RawData[11],\r\n    SuggestedAction = RawData[9],\r\n    Tags = RawData[10],\r\n    id = _ResourceId\r\n| where Severity != 'Information'\r\n| where '{sqlResource}' == 'All' or id == '{sqlResource}'\r\n| project Severity, id, InstanceName, Scope, FullRuleName, Description, RuleUrl, SuggestedAction, Weight\r\n| summarize WeightedRanking = (count() * sum(Weight)) by Severity, Scope, FullRuleName, RuleUrl\r\n| order by WeightedRanking\r\n| project Severity, Scope, FullRuleName, RuleUrl\r\n",
              "size": 0,
              "timeContext": {
                "durationMs": 604800000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{bpala}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "InstanceName",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "FullRuleName",
                    "formatter": 1,
                    "formatOptions": {
                      "linkColumn": "RuleUrl",
                      "linkTarget": "Url"
                    }
                  },
                  {
                    "columnMatch": "RuleUrl",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Severity",
                    "formatter": 11
                  }
                ]
              }
            },
            "name": "query - 3 - Copy"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "View",
        "comparison": "isEqualTo",
        "value": "bpa"
      },
      "name": "bpa"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Licensing",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "//Arc SQL Databases By vCore Count\r\nresources\r\n|where type contains(\"microsoft.azurearcdata/sqlserverinstances\")\r\n|extend vCores =properties.vCore\r\n// Switched to container resource id to prevent instances getting counted as cores\r\n| extend ServerName = split(properties.containerResourceId, \"/\")[-1]\r\n| extend InstanceName =properties.instanceName\r\n|where vCores <>\"\"\r\n|project tostring(ServerName),toint(vCores)\r\n|order by vCores",
              "size": 0,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "value::all"
              ],
              "visualization": "barchart"
            },
            "customWidth": "50",
            "name": "query - 0"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == \"microsoft.azurearcdata/sqlserverinstances\" or type == \"microsoft.sqlvirtualmachine/sqlvirtualmachines\"\r\n| extend ServerName = tostring(coalesce(split(properties.virtualMachineResourceId, \"/\")[-1], split(properties.containerResourceId, \"/\")[-1]))\r\n| extend vmResourceId = tolower(tostring(properties.virtualMachineResourceId))\r\n| extend vCoresArc = toint(properties.vCore)\r\n| join kind = leftouter (\r\n    resources\r\n    | where type == \"microsoft.compute/virtualmachines\"\r\n    | extend vCoresArray = extract_all(\"([0-9])+\", tostring(properties.hardwareProfile.vmSize))\r\n    | project vmid = tolower(id), vCoresVm = iff(tostring(properties.hardwareProfile.vmSize) contains \"-\", toint(vCoresArray[1]), toint(vCoresArray[0]))\r\n)\r\non $left.vmResourceId == $right.vmid\r\n| extend vCores = coalesce(vCoresArc, vCoresVm)\r\n| extend SqlEdition = tostring(coalesce(properties.sqlImageSku, properties.edition))\r\n| distinct ServerName, vCores, SqlEdition\r\n| summarize sum(vCores) by SqlEdition\r\n| order by SqlEdition asc",
              "size": 0,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "value::all"
              ],
              "visualization": "barchart"
            },
            "customWidth": "50",
            "name": "query - 1"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "template",
              "loadFromTemplateId": "/subscriptions/4f70665a-02a0-48a0-a949-f3f645294566/resourceGroups/CustomDashBoardWorkBooks/providers/microsoft.insights/workbooks/6b55b4c1-4572-4d95-9b4c-9708dbdb052b",
              "items": []
            },
            "name": "group - 2"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "View",
        "comparison": "isEqualTo",
        "value": "licensing"
      },
      "name": "licensing"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Performance",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "f61b4acc-3496-40b9-89ef-7aea92249edc",
                  "version": "KqlParameterItem/1.0",
                  "name": "vminsightsla",
                  "label": "VM Insights Log Analytics Workspace",
                  "type": 5,
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "resources\r\n| where type == \"microsoft.operationalinsights/workspaces\"\r\n| project value = id, label = name, selected = false, group = resourceGroup",
                  "crossComponentResources": [
                    "value::all"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ]
                  },
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources",
                  "value": []
                },
                {
                  "id": "5419de50-6f1d-4da2-aa3d-a4be39d17a99",
                  "version": "KqlParameterItem/1.0",
                  "name": "timerange",
                  "label": "Time Range",
                  "type": 4,
                  "isGlobal": true,
                  "typeSettings": {
                    "selectableValues": [
                      {
                        "durationMs": 300000
                      },
                      {
                        "durationMs": 900000
                      },
                      {
                        "durationMs": 1800000
                      },
                      {
                        "durationMs": 3600000
                      },
                      {
                        "durationMs": 14400000
                      },
                      {
                        "durationMs": 43200000
                      },
                      {
                        "durationMs": 86400000
                      },
                      {
                        "durationMs": 172800000
                      },
                      {
                        "durationMs": 259200000
                      },
                      {
                        "durationMs": 604800000
                      },
                      {
                        "durationMs": 1209600000
                      },
                      {
                        "durationMs": 2419200000
                      },
                      {
                        "durationMs": 2592000000
                      },
                      {
                        "durationMs": 5184000000
                      },
                      {
                        "durationMs": 7776000000
                      }
                    ]
                  },
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": {
                    "durationMs": 86400000
                  }
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.resourcegraph/resources"
            },
            "name": "parameters - 3"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == \"microsoft.azurearcdata/sqlserverinstances\"\r\n| extend ['id'] = tostring(properties.containerResourceId)\r\n| project id, name",
              "size": 1,
              "title": "SQL Resources (Select SQL Servers to filter)",
              "exportMultipleValues": true,
              "exportedParameters": [
                {
                  "fieldName": "id",
                  "parameterName": "sqlResource",
                  "parameterType": 5
                }
              ],
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "value::all"
              ]
            },
            "name": "sqlitems"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let auto_bin_time = toscalar(InsightsMetrics\r\n| summarize MaxTime = max(TimeGenerated), MinTime = min(TimeGenerated)\r\n| extend TimeDiff = MaxTime - MinTime\r\n| project BinTime = case(\r\n    TimeDiff >= time(12h), timespan(5m),\r\n    TimeDiff >= time(2d), timespan(15m),\r\n    TimeDiff >= time(7d), timespan(30m),\r\n    TimeDiff >= time(30d), timespan(1h),\r\n    TimeDiff >= time(60d), timespan(6h),\r\n    TimeDiff >= time(120d), timespan(12h),\r\n    TimeDiff >= time(365d), timespan(24h),\r\n    timespan(1m)\r\n));\r\nlet sqlList = dynamic([{sqlResource}]);\r\nlet filteredMetrics = materialize(InsightsMetrics\r\n| where Name in ('UtilizationPercentage', 'AvailableMB', 'ReadBytesPerSecond', 'WriteBytesPerSecond', 'TransfersPerSecond')\r\n| where iff(array_length(sqlList) == 0, true, _ResourceId in~ (sqlList))\r\n| extend Computer = tostring(split(Computer, \".\", 0)[0])\r\n| summarize avg(Val) by _ResourceId, bin(TimeGenerated, auto_bin_time), Computer, Namespace, Name, Tags);\r\n\r\nfilteredMetrics\r\n| distinct _ResourceId, Computer, TimeGenerated\r\n| join kind = leftouter (\r\n    filteredMetrics\r\n    | where Name == 'UtilizationPercentage'\r\n    | extend cpuAvg = round(avg_Val, 2)\r\n    | project _ResourceId, cpuAvg, TimeGenerated\r\n)\r\non $left._ResourceId == $right._ResourceId and $left.TimeGenerated == $right.TimeGenerated\r\n| project-away _ResourceId1, TimeGenerated1\r\n| join kind = leftouter (\r\n    filteredMetrics\r\n    | where Name == 'AvailableMB'\r\n    | extend availMemMbAvg = avg_Val\r\n    | extend totalMemory = todouble(parse_json(Tags).['vm.azm.ms/memorySizeMB'])\r\n    | extend utilMemoryPercent = round((100 - (availMemMbAvg/totalMemory * 100)), 2), totalMemory = round(totalMemory)\r\n    | project _ResourceId, utilMemoryPercent, TimeGenerated\r\n)\r\non $left._ResourceId == $right._ResourceId and $left.TimeGenerated == $right.TimeGenerated\r\n| project-away _ResourceId1, TimeGenerated1\r\n| join kind = leftouter (\r\n    filteredMetrics\r\n    | where Namespace == \"Network\"\r\n    | where Name == 'ReadBytesPerSecond'\r\n    | summarize networkReadMbPerSecondAvg = round(sum(avg_Val)/1024/1024, 2) by _ResourceId, TimeGenerated\r\n)\r\non $left._ResourceId == $right._ResourceId and $left.TimeGenerated == $right.TimeGenerated\r\n| project-away _ResourceId1, TimeGenerated1\r\n| join kind = leftouter (\r\n    filteredMetrics\r\n    | where Namespace == \"Network\"\r\n    | where Name == 'WriteBytesPerSecond'\r\n    | summarize networkWriteMbPerSecondAvg = round(sum(avg_Val)/1024/1024, 2) by _ResourceId, TimeGenerated\r\n)\r\non $left._ResourceId == $right._ResourceId and $left.TimeGenerated == $right.TimeGenerated\r\n| project-away _ResourceId1, TimeGenerated1\r\n| join kind = leftouter (\r\n    filteredMetrics\r\n    | where Namespace == \"LogicalDisk\"\r\n    | where Name == \"ReadBytesPerSecond\" or Name == \"WriteBytesPerSecond\"\r\n    | extend throughputMBPerSecond = avg_Val/1024/1024\r\n    | summarize avgDiskThroughput = round(sum(throughputMBPerSecond), 2) by _ResourceId, TimeGenerated\r\n)\r\non $left._ResourceId == $right._ResourceId and $left.TimeGenerated == $right.TimeGenerated\r\n| project-away _ResourceId1, TimeGenerated1\r\n| join kind = leftouter (\r\n    filteredMetrics\r\n    | where Namespace == \"LogicalDisk\"\r\n    | where Name == \"TransfersPerSecond\"\r\n    | summarize avgDiskIops = round(sum(avg_Val)) by _ResourceId, TimeGenerated\r\n)\r\non $left._ResourceId == $right._ResourceId and $left.TimeGenerated == $right.TimeGenerated\r\n| project-away _ResourceId1, TimeGenerated1",
              "size": 0,
              "timeContextFromParameter": "timerange",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{vminsightsla}"
              ]
            },
            "conditionalVisibility": {
              "parameterName": "View",
              "comparison": "isEqualTo",
              "value": "never"
            },
            "showPin": false,
            "name": "metricsQuery"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"7c42448a-46dc-4e97-b391-8286f1a75069\",\"mergeType\":\"innerunique\",\"leftTable\":\"sqlitems\",\"rightTable\":\"metricsQuery\",\"leftColumn\":\"id\",\"rightColumn\":\"_ResourceId\"}],\"projectRename\":[{\"originalName\":\"[metricsQuery].Computer\",\"mergedName\":\"Computer\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a75069\"},{\"originalName\":\"[metricsQuery].TimeGenerated\",\"mergedName\":\"TimeGenerated\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a75069\"},{\"originalName\":\"[metricsQuery].cpuAvg\",\"mergedName\":\"Cpu Utilization Percentage\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a75069\"},{\"originalName\":\"[metricsQuery].avgDiskThroughput\"},{\"originalName\":\"[metricsQuery].networkWriteMbPerSecondAvg\"},{\"originalName\":\"[metricsQuery].networkReadMbPerSecondAvg\"},{\"originalName\":\"[metricsQuery].utilMemoryPercent\"},{\"originalName\":\"[metricsQuery]._ResourceId\"},{\"originalName\":\"[sqlitems].name\"},{\"originalName\":\"[sqlitems].id\"},{\"originalName\":\"[metricsQuery].avgDiskIops\"}]}",
              "size": 0,
              "aggregation": 3,
              "title": "CPU Utilization Percentage",
              "timeBrushParameterName": "timerange",
              "timeBrushExportOnlyWhenBrushed": true,
              "queryType": 7,
              "visualization": "linechart",
              "chartSettings": {
                "group": "Computer",
                "createOtherGroup": null,
                "ySettings": {
                  "min": 0,
                  "max": 100
                }
              }
            },
            "customWidth": "50",
            "showPin": false,
            "name": "Cpu Percentage",
            "styleSettings": {
              "padding": "5px",
              "maxWidth": "50%"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"7c42448a-46dc-4e97-b391-8286f1a7506f\",\"mergeType\":\"innerunique\",\"leftTable\":\"sqlitems\",\"rightTable\":\"metricsQuery\",\"leftColumn\":\"id\",\"rightColumn\":\"_ResourceId\"}],\"projectRename\":[{\"originalName\":\"[metricsQuery].Computer\",\"mergedName\":\"Computer\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a7506f\"},{\"originalName\":\"[metricsQuery].TimeGenerated\",\"mergedName\":\"TimeGenerated\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a7506f\"},{\"originalName\":\"[metricsQuery].utilMemoryPercent\",\"mergedName\":\"Memory Utilization Percentage\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a7506f\"},{\"originalName\":\"[sqlitems].id\"},{\"originalName\":\"[sqlitems].name\"},{\"originalName\":\"[metricsQuery]._ResourceId\"},{\"originalName\":\"[metricsQuery].cpuAvg\"},{\"originalName\":\"[metricsQuery].networkReadMbPerSecondAvg\"},{\"originalName\":\"[metricsQuery].networkWriteMbPerSecondAvg\"},{\"originalName\":\"[metricsQuery].avgDiskThroughput\"},{\"originalName\":\"[metricsQuery].avgDiskIops\"}]}",
              "size": 0,
              "aggregation": 3,
              "title": "Memory Utilization Percentage",
              "timeBrushParameterName": "timerange",
              "timeBrushExportOnlyWhenBrushed": true,
              "queryType": 7,
              "visualization": "linechart",
              "chartSettings": {
                "group": "Computer",
                "createOtherGroup": null,
                "ySettings": {
                  "min": 0,
                  "max": 100
                }
              }
            },
            "customWidth": "50",
            "showPin": false,
            "name": "Memory Percentage",
            "styleSettings": {
              "padding": "5px",
              "maxWidth": "50%"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"7c42448a-46dc-4e97-b391-8286f1a75070\",\"mergeType\":\"innerunique\",\"leftTable\":\"sqlitems\",\"rightTable\":\"metricsQuery\",\"leftColumn\":\"id\",\"rightColumn\":\"_ResourceId\"}],\"projectRename\":[{\"originalName\":\"[metricsQuery].Computer\",\"mergedName\":\"Computer\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a75070\"},{\"originalName\":\"[metricsQuery].TimeGenerated\",\"mergedName\":\"TimeGenerated\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a75070\"},{\"originalName\":\"[metricsQuery].avgDiskThroughput\",\"mergedName\":\"Disk Throughput in MBps\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a75070\"},{\"originalName\":\"[sqlitems].id\"},{\"originalName\":\"[sqlitems].name\"},{\"originalName\":\"[metricsQuery]._ResourceId\"},{\"originalName\":\"[metricsQuery].cpuAvg\"},{\"originalName\":\"[metricsQuery].utilMemoryPercent\"},{\"originalName\":\"[metricsQuery].networkReadMbPerSecondAvg\"},{\"originalName\":\"[metricsQuery].networkWriteMbPerSecondAvg\"},{\"originalName\":\"[metricsQuery].avgDiskIops\"}]}",
              "size": 0,
              "aggregation": 3,
              "title": "Disk Throughput in MBps",
              "timeBrushParameterName": "timerange",
              "timeBrushExportOnlyWhenBrushed": true,
              "queryType": 7,
              "visualization": "linechart",
              "chartSettings": {
                "group": "Computer",
                "createOtherGroup": null
              }
            },
            "customWidth": "50",
            "showPin": false,
            "name": "Disk Throughput",
            "styleSettings": {
              "padding": "5px",
              "maxWidth": "50%"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"7c42448a-46dc-4e97-b391-8286f1a75071\",\"mergeType\":\"innerunique\",\"leftTable\":\"sqlitems\",\"rightTable\":\"metricsQuery\",\"leftColumn\":\"id\",\"rightColumn\":\"_ResourceId\"}],\"projectRename\":[{\"originalName\":\"[metricsQuery].Computer\",\"mergedName\":\"Computer\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a75071\"},{\"originalName\":\"[metricsQuery].avgDiskIops\",\"mergedName\":\"Disk IOPS\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a75071\"},{\"originalName\":\"[metricsQuery].TimeGenerated\",\"mergedName\":\"TimeGenerated\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a75071\"},{\"originalName\":\"[sqlitems].id\"},{\"originalName\":\"[sqlitems].name\"},{\"originalName\":\"[metricsQuery].cpuAvg\"},{\"originalName\":\"[metricsQuery].utilMemoryPercent\"},{\"originalName\":\"[metricsQuery].networkReadMbPerSecondAvg\"},{\"originalName\":\"[metricsQuery].networkWriteMbPerSecondAvg\"},{\"originalName\":\"[metricsQuery].avgDiskThroughput\"},{\"originalName\":\"[metricsQuery]._ResourceId\"}]}",
              "size": 0,
              "aggregation": 3,
              "title": "Disk IOPS",
              "timeBrushParameterName": "timerange",
              "timeBrushExportOnlyWhenBrushed": true,
              "queryType": 7,
              "visualization": "linechart",
              "chartSettings": {
                "group": "Computer",
                "createOtherGroup": null
              }
            },
            "customWidth": "50",
            "showPin": false,
            "name": "Disk IOPS",
            "styleSettings": {
              "padding": "5px",
              "maxWidth": "50%"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"7c42448a-46dc-4e97-b391-8286f1a75071\",\"mergeType\":\"innerunique\",\"leftTable\":\"sqlitems\",\"rightTable\":\"metricsQuery\",\"leftColumn\":\"id\",\"rightColumn\":\"_ResourceId\"}],\"projectRename\":[{\"originalName\":\"[metricsQuery].Computer\",\"mergedName\":\"Computer\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a75071\"},{\"originalName\":\"[metricsQuery].TimeGenerated\",\"mergedName\":\"TimeGenerated\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a75071\"},{\"originalName\":\"[metricsQuery].networkReadMbPerSecondAvg\",\"mergedName\":\"Network Read Throughput in MBps\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a75071\"},{\"originalName\":\"[metricsQuery].avgDiskIops\"},{\"originalName\":\"[sqlitems].id\"},{\"originalName\":\"[sqlitems].name\"},{\"originalName\":\"[metricsQuery]._ResourceId\"},{\"originalName\":\"[metricsQuery].cpuAvg\"},{\"originalName\":\"[metricsQuery].utilMemoryPercent\"},{\"originalName\":\"[metricsQuery].networkWriteMbPerSecondAvg\"},{\"originalName\":\"[metricsQuery].avgDiskThroughput\"}]}",
              "size": 0,
              "aggregation": 3,
              "title": "Network Read Throughput in MBps",
              "timeBrushParameterName": "timerange",
              "timeBrushExportOnlyWhenBrushed": true,
              "queryType": 7,
              "visualization": "linechart",
              "chartSettings": {
                "group": "Computer",
                "createOtherGroup": null
              }
            },
            "customWidth": "50",
            "showPin": false,
            "name": "Network Read Throughput in MBps",
            "styleSettings": {
              "padding": "5px",
              "maxWidth": "50%"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"7c42448a-46dc-4e97-b391-8286f1a75071\",\"mergeType\":\"innerunique\",\"leftTable\":\"sqlitems\",\"rightTable\":\"metricsQuery\",\"leftColumn\":\"id\",\"rightColumn\":\"_ResourceId\"}],\"projectRename\":[{\"originalName\":\"[metricsQuery].Computer\",\"mergedName\":\"Computer\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a75071\"},{\"originalName\":\"[metricsQuery].TimeGenerated\",\"mergedName\":\"TimeGenerated\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a75071\"},{\"originalName\":\"[metricsQuery].networkWriteMbPerSecondAvg\",\"mergedName\":\"networkWriteMbPerSecondAvg\",\"fromId\":\"7c42448a-46dc-4e97-b391-8286f1a75071\"},{\"originalName\":\"[metricsQuery].networkReadMbPerSecondAvg\"},{\"originalName\":\"[sqlitems].id\"},{\"originalName\":\"[sqlitems].name\"},{\"originalName\":\"[metricsQuery]._ResourceId\"},{\"originalName\":\"[metricsQuery].cpuAvg\"},{\"originalName\":\"[metricsQuery].utilMemoryPercent\"},{\"originalName\":\"[metricsQuery].avgDiskThroughput\"},{\"originalName\":\"[metricsQuery].avgDiskIops\"}]}",
              "size": 0,
              "aggregation": 3,
              "title": "Network Write Throughput in MBps",
              "timeBrushParameterName": "timerange",
              "timeBrushExportOnlyWhenBrushed": true,
              "queryType": 7,
              "visualization": "linechart",
              "chartSettings": {
                "group": "Computer",
                "createOtherGroup": null
              }
            },
            "customWidth": "50",
            "showPin": false,
            "name": "Network Write Throughput in MBps",
            "styleSettings": {
              "padding": "5px",
              "maxWidth": "50%"
            }
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "View",
        "comparison": "isEqualTo",
        "value": "perf"
      },
      "name": "perf"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Security",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "securityresources\r\n| where type == \"microsoft.security/assessments/subassessments\"\r\n| extend assessmentKey = extract(\".*assessments/(.+?)/.*\",1,  id)\r\n| where assessmentKey == \"f97aa83c-9b63-4f9a-99f6-b22c4398f936\" or assessmentKey == \"82e20e14-edc5-4373-bfc4-f13121257c37\"\r\n | project id = tolower(extract(\"([\\\\s\\\\S]*?)(/providers/Microsoft.Security.*)\",1,id)), subscriptionId, severity = tostring(parse_json(properties).status.severity), status = tostring(parse_json(properties).status.code), VulnId = tostring(parse_json(properties).id)\r\n | where status == 'Unhealthy'\r\n  | extend icon = case(severity == \"High\", \"Sev1\", severity == \"Medium\", \"Sev2\", severity == \"Low\", \"Sev3\", \"None\")\r\n | extend severity = case(severity == \"High\", \"1 - High\", severity == \"Medium\", \"2 - Medium\", severity == \"Low\", \"3 - Low\", \"None\")\r\n | summarize count() by severity, icon\r\n | order by severity asc",
              "size": 4,
              "title": "SQL Vulnerabilities Found",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "value::all"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "severity",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "count_",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "none"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "icon",
                  "formatter": 11
                },
                "showBorder": false,
                "sortCriteriaField": "severity",
                "sortOrderField": 1,
                "size": "auto"
              }
            },
            "name": "query - 0"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "template",
              "loadFromTemplateId": "community-Workbooks/Azure Security Center/Vulnerabilities",
              "items": []
            },
            "name": "group - 1"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "View",
        "comparison": "isEqualTo",
        "value": "security"
      },
      "name": "Security"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Backups",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == \"microsoft.azurearcdata/sqlserverinstances/databases\"\r\n| extend recoveryMode = tostring(properties.recoveryMode)\r\n| extend lastFullBackup = todatetime(properties.backupInformation.lastFullBackup)\r\n| extend lastLogBackup = todatetime(properties.backupInformation.lastLogBackup)\r\n| extend daysSinceFullBackup = datetime_diff('day', now(), lastFullBackup)\r\n| extend hoursSinceLogBackup = datetime_diff('hour', now(), lastLogBackup)\r\n| extend fullBackupStatus = iif(isnull(lastFullBackup), \"Critical\", \r\n                            case(daysSinceFullBackup <= 7, \"Healthy\",\r\n                                daysSinceFullBackup <= 30, \"Warning\",\r\n                                \"Critical\"))\r\n| summarize count() by fullBackupStatus",
              "size": 0,
              "title": "Full Backup Status",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "value::all"
              ],
              "visualization": "piechart",
              "chartSettings": {
                "seriesLabelSettings": [
                  {
                    "seriesName": "Critical",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "Warning",
                    "color": "yellowDark"
                  },
                  {
                    "seriesName": "Healthy",
                    "color": "green"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "query - 2"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == \"microsoft.azurearcdata/sqlserverinstances/databases\"\r\n| extend recoveryMode = tostring(properties.recoveryMode)\r\n| extend lastFullBackup = todatetime(properties.backupInformation.lastFullBackup)\r\n| extend lastLogBackup = todatetime(properties.backupInformation.lastLogBackup)\r\n| extend daysSinceFullBackup = datetime_diff('day', now(), lastFullBackup)\r\n| extend hoursSinceLogBackup = datetime_diff('hour', now(), lastLogBackup)\r\n| extend logBackupStatus = iif(recoveryMode == \"Simple\", \r\n                            \"none\",\r\n                            iif(isnull(lastLogBackup), \"Critical\", \r\n                            case(hoursSinceLogBackup <= 24, \"Healthy\",\r\n                                hoursSinceLogBackup <= 168, \"Warning\",\r\n                                \"Critical\"))\r\n                            )\r\n| where logBackupStatus != \"none\"\r\n| summarize count() by logBackupStatus",
              "size": 0,
              "title": "Log Backup Status",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "value::all"
              ],
              "visualization": "piechart",
              "chartSettings": {
                "seriesLabelSettings": [
                  {
                    "seriesName": "Critical",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "Warning",
                    "color": "yellowDark"
                  },
                  {
                    "seriesName": "Healthy",
                    "color": "green"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "query - 2 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == \"microsoft.azurearcdata/sqlserverinstances/databases\"\r\n| extend recoveryMode = tostring(properties.recoveryMode)\r\n| extend lastFullBackup = todatetime(properties.backupInformation.lastFullBackup)\r\n| extend lastLogBackup = todatetime(properties.backupInformation.lastLogBackup)\r\n| extend daysSinceFullBackup = datetime_diff('day', now(), lastFullBackup)\r\n| extend hoursSinceLogBackup = datetime_diff('hour', now(), lastLogBackup)\r\n| extend fullBackupStatus = iif(isnull(lastFullBackup), \"critical\", \r\n                            case(daysSinceFullBackup <= 7, \"success\",\r\n                                daysSinceFullBackup <= 30, \"warning\",\r\n                                \"critical\"))\r\n| extend logBackupStatus = iif(recoveryMode == \"Simple\", \r\n                            \"none\",\r\n                            iif(isnull(lastLogBackup), \"critical\", \r\n                            case(hoursSinceLogBackup <= 24, \"success\",\r\n                                hoursSinceLogBackup <= 168, \"warning\",\r\n                                \"critical\"))\r\n                            )\r\n| extend arcEnabledSqlId = tostring(split(id, \"/Databases\")[0])\r\n| project id, arcEnabledSqlId, recoveryMode, lastFullBackup, fullBackupStatus, lastLogBackup, logBackupStatus\r\n| order by id, arcEnabledSqlId",
              "size": 0,
              "title": "Detailed Backup Status",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "value::all"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "lastFullBackup",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "fullBackupStatus",
                    "formatter": 11
                  },
                  {
                    "columnMatch": "lastLogBackup",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "logBackupStatus",
                    "formatter": 11
                  }
                ]
              }
            },
            "name": "query - 1"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == \"microsoft.hybridcompute/machines/extensions\"\r\n| where name == \"WindowsAgent.SqlServer\"\r\n| extend status = properties.instanceView.status.message\r\n| extend AutomaticBackupsEnabled = iif(status contains \"AutomaticBackups: Running;\" and status !contains \"SqlAgentPlugin: null,\", true, false)\r\n// some magic strings to get the Sql Backup data out, really not the best way to do this, but I can't think of a better option at the moment, regex maybe?\r\n// actually even regex is still magic strings, but makes it a single operation instead of multiple splits\r\n| extend backupSettings = parse_json(extract(\"(SqlAgentPlugin: )(.*)(, DatabaseMonitorArcPlugin)\", 2, tostring(status)))\r\n| extend retentionPeriodInDays = iif(array_length(backupSettings.profiles.['$values']) == 0, toint(backupSettings.retentionPeriodInDays), int(null))\r\n| extend backupSettings = iif(array_length(backupSettings.profiles.['$values']) == 0, dynamic(null), backupSettings)\r\n| mv-expand backupSettings.profiles.['$values']\r\n| extend backupSettings = ['backupSettings_profiles_$values']\r\n| where isnull(backupSettings) or backupSettings.enabled == true\r\n| extend retentionPeriodInDays = iif(isnull(retentionPeriodInDays), toint(backupSettings.retentionPeriodInDays), retentionPeriodInDays),\r\n         fullBackupDays = toint(backupSettings.fullBackupDays), \r\n         differentialBackupHours = toint(backupSettings.differentialBackupHours), \r\n         tLogBackupMinutes = toint(backupSettings.tLogBackupMinutes)\r\n| extend arcId = tolower(tostring(split(id, \"/extensions\")[0]))\r\n| join kind = leftouter (\r\n    resources\r\n    | where type == \"microsoft.azurearcdata/sqlserverinstances\"\r\n    | extend containerId = tolower(tostring(properties.containerResourceId))\r\n    | project sqlId = tostring(id), containerId\r\n)\r\non $left.arcId == $right.containerId\r\n| extend AutomaticBackupsEnabled = iif(AutomaticBackupsEnabled, \"success\", \"disabled\")\r\n| project id = sqlId, AutomaticBackupsEnabled, retentionPeriodInDays, fullBackupDays, differentialBackupHours, tLogBackupMinutes\r\n| order by AutomaticBackupsEnabled desc ",
              "size": 0,
              "title": "Automatic Backup Settings",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "value::all"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "id",
                    "formatter": 13,
                    "formatOptions": {
                      "linkTarget": "Resource",
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "AutomaticBackupsEnabled",
                    "formatter": 11
                  }
                ]
              }
            },
            "name": "query - 0"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "View",
        "comparison": "isEqualTo",
        "value": "backups"
      },
      "name": "Backups"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == \"microsoft.azurearcdata/sqlserverinstances/availabilitygroups\"\r\n| where tostring(properties.serverName) == tostring(properties.info.primaryReplica)\r\n| extend nodeHealth = ''\r\n| extend role = \"Availability Group\"\r\n| extend parentId = \"\"\r\n| extend containerName = name\r\n| extend containerId = id\r\n| union(resources\r\n| where type == \"microsoft.azurearcdata/sqlserverinstances/availabilitygroups\"\r\n| extend role = iff(tostring(properties.serverName) == tostring(properties.info.primaryReplica), \"Primary\", \"Secondary\")\r\n| extend containerId = tostring(split(id, \"/AvailabilityGroups/\")[0])\r\n| extend splitContainerId = split(containerId, \"/\")\r\n| extend containerName = tostring(splitContainerId[-1])\r\n| extend nodeHealth = iif(role == \"Secondary\", tostring(properties.info.secondaryRecoveryHealthDescription), tostring(properties.info.primaryRecoveryHealthDescription))\r\n| extend parentId = strcat(strcat_array(array_slice(splitContainerId, 0, -2), \"/\"), \"/\", tostring(properties.info.primaryReplica), \"/AvailabilityGroups/\", name))\r\n| extend automatedBackupPreferenceDescription = tostring(properties.info.automatedBackupPreferenceDescription), healthCheckTimeout = toint(properties.info.healthCheckTimeout)\r\n| extend requiredSynchronizedSecondariesToCommit = toint(properties.info.requiredSynchronizedSecondariesToCommit), clusterTypeDescription = tostring(properties.info.clusterTypeDescription)\r\n| extend basicFeatures = iff(tobool(properties.info.basicFeatures), \"🟢 On\", \"🔘 Off\"), isDistributed = iff(tobool(properties.info.isDistributed), \"🟢 On\", \"🔘 Off\"), isContained = iff(tobool(properties.info.isContained), \"🟢 On\", \"🔘 Off\")\r\n| extend dbFailover = iff(tobool(properties.info.dbFailover), \"🟢 On\", \"🔘 Off\"), dtcSupport = iff(tobool(properties.info.dtcSupport), \"🟢 On\", \"🔘 Off\")\r\n| extend health = iff(tostring(properties.info.synchronizationHealthDescription) == \"HEALTHY\", \"✅ HEALTHY\", \"❌ NOT_HEALTHY\")\r\n| project containerId, containerName, parentId, role, health, nodeHealth, automatedBackupPreferenceDescription, healthCheckTimeout, requiredSynchronizedSecondariesToCommit, clusterTypeDescription, basicFeatures, isDistributed, isContained, dbFailover, dtcSupport",
              "size": 0,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "value::all"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "containerName",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "parentId",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "id",
                    "formatter": 5
                  }
                ],
                "hierarchySettings": {
                  "idColumn": "containerId",
                  "parentColumn": "parentId",
                  "treeType": 0,
                  "expanderColumn": "containerId"
                },
                "labelSettings": [
                  {
                    "columnId": "containerId",
                    "label": "Name"
                  },
                  {
                    "columnId": "role",
                    "label": "Role",
                    "comment": "The role of the node in the Availability Group"
                  },
                  {
                    "columnId": "health",
                    "label": "Health"
                  },
                  {
                    "columnId": "nodeHealth",
                    "label": "Node Health"
                  },
                  {
                    "columnId": "automatedBackupPreferenceDescription",
                    "label": "Backup Node Preference"
                  },
                  {
                    "columnId": "healthCheckTimeout",
                    "label": "Health Check Timeout (ms)"
                  },
                  {
                    "columnId": "requiredSynchronizedSecondariesToCommit",
                    "label": "Requird Sync'd Secondaries"
                  },
                  {
                    "columnId": "clusterTypeDescription",
                    "label": "Cluster Type"
                  },
                  {
                    "columnId": "basicFeatures",
                    "label": "Basic AG?"
                  },
                  {
                    "columnId": "isDistributed",
                    "label": "Distributed?"
                  },
                  {
                    "columnId": "isContained",
                    "label": "Contained?"
                  },
                  {
                    "columnId": "dbFailover",
                    "label": "Failover?"
                  },
                  {
                    "columnId": "dtcSupport",
                    "label": "DTC?"
                  }
                ]
              }
            },
            "name": "query - 8"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "View",
        "comparison": "isEqualTo",
        "value": "aoag"
      },
      "name": "Availability Groups"
    }
  ],
  "fallbackResourceIds": [
    "azure monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}